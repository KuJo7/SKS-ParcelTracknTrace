/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using TeamJ.SKS.Package.BusinessLogic;
using TeamJ.SKS.Package.BusinessLogic.DTOs;
using TeamJ.SKS.Package.BusinessLogic.Interfaces;
using TeamJ.SKS.Package.Services.Attributes;
using TeamJ.SKS.Package.Services.DTOs.Models;
using TeamJ.SKS.Package.Services.DTOs.MapperProfiles;


namespace TeamJ.SKS.Package.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LogisticsPartnerApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IParcelLogic _parcelLogic;
        private readonly ILogger _logger;

        /*public LogisticsPartnerApiController()
        {
            _parcelLogic = new ParcelLogic();
            var config = new MapperConfiguration(cfg =>
            {
                cfg.AddProfile(new MapperProfiles());
            });
            _mapper = new Mapper(config);
        }*/
        /// <summary>
        /// LogisticsPartnerApiController Constructor with 2 parameters
        /// </summary>
        public LogisticsPartnerApiController(IMapper mapper, IParcelLogic parcelLogic, ILogger<LogisticsPartnerApiController> logger)
        {
            _parcelLogic = parcelLogic;
            _mapper = mapper;
            _logger = logger;
        }
        /// <summary>
        /// Transfer an existing parcel into the system from the service of a logistics partner. 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully transitioned the parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        /// /// <response code="409">A parcel with the specified trackingID is already in the system.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TransitionParcel")]
        [SwaggerResponse(statusCode: 200, type: typeof(NewParcelInfo), description: "Successfully transitioned the parcel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TransitionParcel([FromBody]Parcel body, [FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId)
        {
            try
            {
                _logger.LogInformation("Controller LogisticsPartnerApi with TransitionParcel started.");
                BLParcel blParcel = _mapper.Map<BLParcel>(body);
                if (_parcelLogic.TransitionParcel(blParcel, trackingId, true))
                {
                    // Mapping back auf SVC Parcel (?)
                    // mapping entf?llt, weil nur ein string
                    _logger.LogInformation("Controller LogisticsPartnerApi with TransitionParcel ended successful.");
                    return Ok(200);
                }
            }
            catch (BusinessLogicException ex)
            {
                var msg = @"An error occured while trying to use the /parcel/trackingid post api.";
                _logger.LogError(msg, ex);
                throw new BusinessLogicException(nameof(TransitionParcel), msg, ex);
            }
            catch (Exception ex)
            {
                var msgException = @"An unknown error occured while trying to use the /parcel/trackingid post api.";
                _logger.LogError(msgException, ex);
                throw new BusinessLogicException(nameof(TransitionParcel), msgException, ex);
            }
            _logger.LogInformation("Controller LogisticsPartnerApi with TransitionParcel ended unsuccessful");
            return BadRequest(new Error("Error: TransitionParcel"));

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NewParcelInfo));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            /*string exampleJson = null;
            exampleJson = "{\n  \"trackingId\" : \"PYJRB4HZ6\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NewParcelInfo>(exampleJson)
                        : default(NewParcelInfo);            //TODO: Change the data returned
            return new ObjectResult(example);*/
        }
    }
}
