/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;
using TeamJ.SKS.Package.BusinessLogic;
using TeamJ.SKS.Package.BusinessLogic.DTOs;
using TeamJ.SKS.Package.BusinessLogic.Interfaces;
using TeamJ.SKS.Package.Services.Attributes;
using TeamJ.SKS.Package.Services.DTOs.MapperProfiles;
using TeamJ.SKS.Package.Services.DTOs.Models;

namespace TeamJ.SKS.Package.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApiController : ControllerBase 
    {
        private readonly IMapper _mapper;
        private readonly IHopLogic _hopLogic;
        private readonly ILogger<WarehouseManagementApiController> _logger;

        /*public WarehouseManagementApiController()
        {
            _hopLogic = new HopLogic();
            var config = new MapperConfiguration(cfg =>
            {
                cfg.AddProfile(new MapperProfiles());
            });
            _mapper = new Mapper(config);

        }*/
        /// <summary>
        /// WarehouseManagementApiController Constructor with 2 parameters
        /// </summary>
        public WarehouseManagementApiController(IMapper mapper, IHopLogic hopLogic, ILogger<WarehouseManagementApiController> logger)
        {
            _hopLogic = hopLogic;
            _mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult ExportWarehouses()
        {
            try
            {
                _logger.LogInformation("WarehouseManagementApi ExportWarehouse started");
                var blWarehouse = _hopLogic.ExportWarehouses();
                var warehouse = _mapper.Map<Warehouse>(blWarehouse);
                if (warehouse != null)
                {
                    _logger.LogInformation("WarehouseManagementApi ExportWarehouse ended successful");
                    return Ok(warehouse);
                }

            }
            catch (BusinessLogicException ex)
            {
                var msg = "An error occured while trying to use the /warehouse get api.";
                _logger.LogError(msg, ex);
                throw new BusinessLogicException(nameof(ExportWarehouses), msg, ex);
            }
            catch (Exception ex)
            {
                var msgException = "An unknown error occured while trying to use the /warehouse get api.";
                _logger.LogError(msgException, ex);
                throw new BusinessLogicException(nameof(ExportWarehouses), msgException, ex);
            }

            _logger.LogInformation("WarehouseManagementApi ExportWarehouse ended unsuccessful");
            return BadRequest(new Error("Error: ExportWarehouses"));


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Warehouse));


            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //string exampleJson = null;
            //exampleJson = "\"\"";

            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<Warehouse>(exampleJson)
            //            : default(Warehouse);            //TODO: Change the data returned
            //return new ObjectResult(example);
        }

        /// <summary>
        /// Get a certain warehouse or truck by code
        /// </summary>
        /// <param name="code"></param>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">Warehouse id not found</response>
        [HttpGet]
        [Route("/warehouse/{code}")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouse")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult GetWarehouse([FromRoute][Required]string code)
        {
            try
            {
                _logger.LogInformation("WarehouseManagementApi GetWarehouse started.");
                var result = _hopLogic.GetWarehouse(code);
                if (result != null)
                {
                    var resultMapper = _mapper.Map<Hop>(result);
                    _logger.LogInformation("WarehouseManagementApi GetWarehouse ended successful.");
                    return Ok(resultMapper);
                }
            }
            catch (BusinessLogicException ex)
            {
                var msg = "An error occured while trying to use the /warehouse/code get api.";
                _logger.LogError(msg, ex);
                throw new BusinessLogicException(nameof(GetWarehouse), msg, ex);
            }
            catch (Exception ex)
            {
                var msgException = "An unknown error occured while trying to use the /warehouse/code get api.";
                _logger.LogError(msgException, ex);
                throw new BusinessLogicException(nameof(GetWarehouse), msgException, ex);
            }
            _logger.LogInformation("WarehouseManagementApi GetWarehouse ended unsuccessful.");
            return BadRequest(new Error("Error: GetWarehouse"));

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Warehouse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //string exampleJson = null;
            //exampleJson = "\"\"";

            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<Warehouse>(exampleJson)
            //            : default(Warehouse);            //TODO: Change the data returned
            //return new ObjectResult(example);
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody]Warehouse body)
        {
            try
            {
                _logger.LogInformation("WarehouseManagementApi ImportWarehouses started.");
                var blWarehouse = _mapper.Map<BLWarehouse>(body);
                if (_hopLogic.ImportWarehouses(blWarehouse))
                {
                    // Mapping back auf SVC Parcel (?)
                    // mapping entf?llt nicht aufpassen!
                    _logger.LogInformation("WarehouseManagementApi ImportWarehouses ended successful.");
                    return Ok(200);
                }
            }
            catch (BusinessLogicException ex)
            {
                var msg = "An error occured while trying to use the /warehouse post api.";
                _logger.LogError(msg, ex);
                throw new BusinessLogicException(nameof(ImportWarehouses), msg, ex);
            }
            catch (Exception ex)
            {
                var msgException = "An unknown error occured while trying to use the /warehouse post get api.";
                _logger.LogError(msgException, ex);
                throw new BusinessLogicException(nameof(ImportWarehouses), msgException, ex);
            }
            _logger.LogInformation("WarehouseManagementApi ImportWarehouses ended unsuccessful.");
            return BadRequest(new Error("Error: ImportWarehouses"));

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //throw new NotImplementedException();
        }
    }
}
